pipeline {
    agent any
    
    environment {
        NODE_VERSION = '18' // Especifica la versión de Node.js apropiada para Next.js
        DOCKER_IMAGE = 'my-next-app' // Nombre de la imagen Docker
        DOCKER_TAG = 'latest' // Etiqueta de la imagen
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    echo 'Setting up Node.js environment...'
                    // Usa nvm o la herramienta node si está disponible en Jenkins
                    echo "Using Node.js ${NODE_VERSION}"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo 'Installing dependencies...'
                    sh 'npm ci' // Preferido sobre npm install en entornos CI
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo 'Building the Next.js application...'
                    sh 'npm run build'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo 'Running tests...'
                    sh 'npm test || echo "No tests configured - continuing"'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    // Construye la imagen Docker localmente a partir del Dockerfile
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo 'Deploying the application in Docker container...'
                    // Ejecuta el contenedor Docker en tu máquina local
                    sh """
                        docker run -d --name my-next-app-container -p 3000:3000 ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
        always {
            echo 'Cleaning up workspace...'
            // Limpia el entorno, puedes eliminar imágenes no deseadas o contenedores
            sh 'docker system prune -f' // Esto elimina imágenes no utilizadas y contenedores detenidos
        }
    }
}
