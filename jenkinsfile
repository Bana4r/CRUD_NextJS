pipeline {
    agent any
    
    environment {
        NODE_VERSION = '18' // Specify Node.js version appropriate for Next.js
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    echo 'Setting up Node.js environment...'
                    // Use nvm or node tool if available in Jenkins
                    // Otherwise rely on pre-installed Node.js
                    echo "Using Node.js ${NODE_VERSION}"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo 'Installing dependencies...'
                    sh 'npm ci' // Preferred over npm install for CI environments
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo 'Building the Next.js application...'
                    sh 'npm run build'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo 'Running tests...'
                    sh 'npm test || echo "No tests configured - continuing"'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo 'Deploying the application...'
                    // For production deployment
                    // sh 'npm run start'
                    
                    // For development/staging environments
                    // sh 'npm run dev'
                    
                    // For container-based deployments
                    echo 'Deployment would typically involve:'
                    echo '1. Building a Docker image'
                    echo '2. Pushing to container registry'
                    echo '3. Updating deployment configuration'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
        always {
            echo 'Cleaning up workspace...'
            // Clean up commands if needed
        }
    }
}